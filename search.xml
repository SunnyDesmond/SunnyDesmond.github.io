<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[css3实现switch button]]></title>
    <url>%2F2017%2F08%2F09%2Fcss3%E5%AE%9E%E7%8E%B0switch-button%2F</url>
    <content type="text"><![CDATA[需求switch button 在移动端上非常常见。如图： css3 实现现在我们用css3 来实现这个button。123&lt;div class="button-wrap"&gt; &lt;input type="checkbox"&gt; &lt;/div&gt; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364.button-wrap &#123; color: #999; &#125; .button-wrap input &#123; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); -webkit-appearance: none; position: relative; width: 52px; height: 32px; border: 1px solid #dfdfdf; outline: 0; border-radius: 16px; box-sizing: border-box; background-color: #dfdfdf; -webkit-transition: background-color .1s, border .1s; transition: background-color .1s, border .1s; &#125; .button-wrap input:before &#123; content: " "; position: absolute; top: 0; left: 0; width: 50px; height: 30px; border-radius: 15px; background-color: #fdfdfd; -webkit-transition: -webkit-transform .35s cubic-bezier(.45, 1, .4, 1); transition: -webkit-transform .35s cubic-bezier(.45, 1, .4, 1); transition: transform .35s cubic-bezier(.45, 1, .4, 1); transition: transform .35s cubic-bezier(.45, 1, .4, 1), -webkit-transform .35s cubic-bezier(.45, 1, .4, 1); &#125; .button-wrap input:after &#123; content: " "; position: absolute; top: 0; left: 0; width: 30px; height: 30px; border-radius: 15px; background-color: #fff; box-shadow: 0 1px 3px rgba(0, 0, 0, .4); -webkit-transition: -webkit-transform .35s cubic-bezier(.4, .4, .25, 1.35); transition: -webkit-transform .35s cubic-bezier(.4, .4, .25, 1.35); transition: transform .35s cubic-bezier(.4, .4, .25, 1.35); transition: transform .35s cubic-bezier(.4, .4, .25, 1.35), -webkit-transform .35s cubic-bezier(.4, .4, .25, 1.35); &#125; .button-wrap input:checked &#123; border-color: #04be02; background-color: #04be02; &#125; .button-wrap input:checked:before &#123; -webkit-transform: scale(0); transform: scale(0); &#125; .button-wrap input:checked:after &#123; -webkit-transform: translateX(20px); transform: translateX(20px); &#125; 这种比较简洁，非常适合在移动端中使用。但是在pc上的话，我发现在chrome浏览器上是ok的。（ps：chrome真的是太流弊了~）在火狐上的话直接GG。IE 9也是可以的，只不过没有缓动动画。IE10正常，IE11貌似不行？？？？没细究。那接下来还有一种版本，兼容型不错。ie未测，FF还不错。123456&lt;div class="button-wrap-ff"&gt; &lt;label for="switchCP" class="switchCP"&gt; &lt;input type="checkbox" id="switchCP" checked="checked" class="switchCP-input"&gt; &lt;div class="switchCP-box"&gt;&lt;/div&gt; &lt;/label&gt; &lt;/div&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677.button-wrap-ff &#123; color: #999; &#125; .switchCP &#123; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); &#125; .switchCP&gt;* &#123; pointer-events: none; &#125; .switchCP-input &#123; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); position: absolute; left: -9999px; &#125; .switchCP-input:checked~.switchCP-box &#123; border-color: #04be02; background-color: #04be02; &#125; .switchCP-input:checked~.switchCP-box:before &#123; -webkit-transform: scale(0); transform: scale(0); &#125; .switchCP-input:checked~.switchCP-box:after &#123; -webkit-transform: translateX(20px); transform: translateX(20px); &#125; .switchCP-box &#123; display: block; position: relative; width: 52px; height: 32px; border: 1px solid #dfdfdf; outline: 0; border-radius: 16px; box-sizing: border-box; background-color: #dfdfdf; -webkit-transition: background-color .1s, border .1s; transition: background-color .1s, border .1s; &#125; .switchCP-box:before &#123; content: " "; position: absolute; top: 0; left: 0; width: 50px; height: 30px; border-radius: 15px; background-color: #fdfdfd; -webkit-transition: -webkit-transform .35s cubic-bezier(.45, 1, .4, 1); transition: -webkit-transform .35s cubic-bezier(.45, 1, .4, 1); transition: transform .35s cubic-bezier(.45, 1, .4, 1); transition: transform .35s cubic-bezier(.45, 1, .4, 1), -webkit-transform .35s cubic-bezier(.45, 1, .4, 1); &#125; .switchCP-box:after &#123; content: " "; position: absolute; top: 0; left: 0; width: 30px; height: 30px; border-radius: 15px; background-color: #fff; box-shadow: 0 1px 3px rgba(0, 0, 0, .4); -webkit-transition: -webkit-transform .35s cubic-bezier(.4, .4, .25, 1.35); transition: -webkit-transform .35s cubic-bezier(.4, .4, .25, 1.35); transition: transform .35s cubic-bezier(.4, .4, .25, 1.35); transition: transform .35s cubic-bezier(.4, .4, .25, 1.35), -webkit-transform .35s cubic-bezier(.4, .4, .25, 1.35); &#125; ok，大功告成~]]></content>
      <categories>
        <category>css3</category>
      </categories>
      <tags>
        <tag>css3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开篇]]></title>
    <url>%2F2017%2F08%2F09%2Fstart%2F</url>
    <content type="text"><![CDATA[一些废话恩，动手写个纯文字的博客还真是感觉挺麻烦的。毕竟我是一个懒人。首先标题取名字就让我很纠结。想了很久，感觉还是叫开篇比较好。毕竟本文就是写一些啰里啰嗦的流水文。而且是第一次用markdown书写，叫开篇自我感觉没毛病 &lt;(￣3￣)&gt; 。 一些过程博客的概念很早就知道了，但真正入坑还得从2015年说起。那时候查资料的时候总是能跳转到各种大牛的博客文章上去。而从这些文章中，也总能获取相关的知识，找到相关的问题的答案。感觉博客就是给人答题解难，自我提升的。羡慕之情，溢于言表。于是在工作不忙的时候，开始着手建立自己的博客。最开始接触的，自然是csdn。感觉各种方便。于是注册，建号，sunny_desmond,开始写一些自己在工作的中遇到的问题，感悟，感觉挺好。我是一个喜欢折腾的人。又在偶然机会看到可以搭建个人网站建立属于自己的博客。这想想就很酷啊。于是各种百度，google。然后注册域名，购买虚拟主机，备案。一顿操作后，我自己的博客终于诞生了。但由于新手，对建站知识很模糊，一开始买了一个windows系统的虚拟主机。然后发现只能跑.net的博客程序。。。没办法，谁让我买了一年的主机呢。然后用z-blog .net版搭建了第一个博客。resping。别问我域名为什么取这个名字，或者说这个域名有什么含义，因为我也不知道。。。49一年的主机真的是谁用谁知道。由于是windows系统且不支持php,我甚至不能搭建wordpress。然后终于在去年，把主机升级成了299一年的windows主机，她支持asp.net 和 php，于是，顺理成章的，博客从z-bolg换成了wp。接下来，使用wp跑了有大半年，中间没有出现问题。就在十几天前，老毛病又开始犯了。我觉得我的网站响应时间还是太慢了。TTFB很高。这不能忍，于是在一个风和日丽的清晨，我把站点连接到了七牛云存储。。然后各种坑，各种被镜像，各种无解。一怒之下，清空了数据库。。然后转投用hexo+github搭建了一个新的博客，新的起点开始了。。。。 一些后话说实话，markdown用起来很舒服，hexo博客用起来也很舒服。以前的博客文章我会慢慢迁移过来。新的随笔都会发布到这里。一直到。。github倒闭，或者出现新的博客系统为止。。。 感谢最后需要感谢一下网上一些大神的分享精神，解决了我很多开发中遇到的难题。当然，还要感谢一下我的老婆，感谢她支持我去折腾这些东西 &lt;(￣3￣)&gt;]]></content>
      <categories>
        <category>开篇</category>
      </categories>
      <tags>
        <tag>开篇</tag>
      </tags>
  </entry>
</search>
